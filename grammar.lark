?start     : program

program    : stmt*

// COMANDOS E DECLARAÇÕES
?stmt      : var_def
           | print_cmd
           | block
           | while_stmt
           | expr ";"

print_cmd  : PRINT_KEYWORD expr ";"
var_def    : VAR_DEF_KEYWORD VAR "=" expr ";"
block      : "{" stmt* "}"
while_stmt : WHILE_KEYWORD "(" expr ")" loop_body_stmt

// loop_body_stmt allows specific statements that can be the body of a loop
// if it's not a block. It excludes var_def.
?loop_body_stmt : block
                | print_cmd
                | while_stmt
                | expr ";"

// EXPRESSÕES
?expr      : assign

?assign    : VAR "=" expr
           | test

?test      : test "==" cmp  -> eq
           | test "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" unary   -> mul
           | term "/" unary   -> div
           | unary

?unary     : "-" unary -> neg
           | "!" unary -> not_
           | call

?call      : call "(" params ")"
           | atom

params     : [ expr ("," expr )* [","]? ]

?atom      : NUMBER
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"
           | list_lit

list_lit   : "[" params "]"

PRINT_KEYWORD.2 : "print"
WHILE_KEYWORD.2 : "while"
VAR_DEF_KEYWORD.2 : "var"
BOOL.2     : "true" | "false"
NIL.2      : "nil"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/
STRING     : /"[^"]*"/
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT